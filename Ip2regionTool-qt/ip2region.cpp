#include "ip2region.h"
/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void Go2cppFn_ConvertDbToTxt(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_ConvertTxtToDb(char* in, int inLen, char** out, int* outLen);

#ifdef __cplusplus
}
#endif


std::string ConvertDbToTxt(std::string in0, std::string in1){
	std::string in;
	{
		uint32_t length = in0.length();
		char tmp[4];
		tmp[0] = (uint32_t(length) >> 24) & 0xFF;
		tmp[1] = (uint32_t(length) >> 16) & 0xFF;
		tmp[2] = (uint32_t(length) >> 8) & 0xFF;
		tmp[3] = (uint32_t(length) >> 0) & 0xFF;
		in.append(tmp, 4);
		in.append(in0);
	}
	{
		uint32_t length = in1.length();
		char tmp[4];
		tmp[0] = (uint32_t(length) >> 24) & 0xFF;
		tmp[1] = (uint32_t(length) >> 16) & 0xFF;
		tmp[2] = (uint32_t(length) >> 8) & 0xFF;
		tmp[3] = (uint32_t(length) >> 0) & 0xFF;
		in.append(tmp, 4);
		in.append(in1);
	}
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_ConvertDbToTxt((char *)in.data(), in.length(), &out, &outLen);
	std::string retValue;
	int outIdx = 0;
	{
		uint32_t length = 0;
		uint32_t a = uint32_t(uint8_t(out[outIdx+0]) << 24);
		uint32_t b = uint32_t(uint8_t(out[outIdx+1]) << 16);
		uint32_t c = uint32_t(uint8_t(out[outIdx+2]) << 8);
		uint32_t d = uint32_t(uint8_t(out[outIdx+3]) << 0);
		length = a | b | c | d;
		outIdx+=4;
		retValue = std::string(out+outIdx, out+outIdx+length);
		outIdx+=length;
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

std::string ConvertTxtToDb(std::string in0, std::string in1){
	std::string in;
	{
		uint32_t length = in0.length();
		char tmp[4];
		tmp[0] = (uint32_t(length) >> 24) & 0xFF;
		tmp[1] = (uint32_t(length) >> 16) & 0xFF;
		tmp[2] = (uint32_t(length) >> 8) & 0xFF;
		tmp[3] = (uint32_t(length) >> 0) & 0xFF;
		in.append(tmp, 4);
		in.append(in0);
	}
	{
		uint32_t length = in1.length();
		char tmp[4];
		tmp[0] = (uint32_t(length) >> 24) & 0xFF;
		tmp[1] = (uint32_t(length) >> 16) & 0xFF;
		tmp[2] = (uint32_t(length) >> 8) & 0xFF;
		tmp[3] = (uint32_t(length) >> 0) & 0xFF;
		in.append(tmp, 4);
		in.append(in1);
	}
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_ConvertTxtToDb((char *)in.data(), in.length(), &out, &outLen);
	std::string retValue;
	int outIdx = 0;
	{
		uint32_t length = 0;
		uint32_t a = uint32_t(uint8_t(out[outIdx+0]) << 24);
		uint32_t b = uint32_t(uint8_t(out[outIdx+1]) << 16);
		uint32_t c = uint32_t(uint8_t(out[outIdx+2]) << 8);
		uint32_t d = uint32_t(uint8_t(out[outIdx+3]) << 0);
		length = a | b | c | d;
		outIdx+=4;
		retValue = std::string(out+outIdx, out+outIdx+length);
		outIdx+=length;
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

